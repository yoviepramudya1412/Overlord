# Generated by Django 4.1.7 on 2023-07-02 05:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Fasilitas_perlengkapan',
            fields=[
                ('fasilitasid', models.BigAutoField(primary_key=True, serialize=False)),
                ('nama_fasilitas', models.CharField(max_length=200)),
                ('kondisi', models.CharField(max_length=200)),
                ('volume', models.IntegerField()),
                ('gambar', models.ImageField(null=True, upload_to='fasilitas/')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('locationid', models.BigAutoField(primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Masyarakat',
            fields=[
                ('masyarakatid', models.BigAutoField(primary_key=True, serialize=False)),
                ('nama', models.CharField(max_length=200)),
                ('notelepon', models.IntegerField()),
                ('alamat', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Pembangunan',
            fields=[
                ('pembangunanid', models.BigAutoField(primary_key=True, serialize=False)),
                ('tanggal_bangun', models.DateField()),
                ('konstruksi_selesai', models.DateField()),
                ('deskripsi', models.TextField(blank=True, null=True)),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
            ],
        ),
        migrations.CreateModel(
            name='Perlengkapan_jalan',
            fields=[
                ('perlengkapanid', models.BigAutoField(primary_key=True, serialize=False)),
                ('jenis_perlengkapan', models.CharField(max_length=200, unique=True)),
                ('deskrpsi', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('statusid', models.BigAutoField(primary_key=True, serialize=False)),
                ('tipestatus', models.CharField(choices=[('DIAJUKAN', 'Masih Diajukan'), ('DIPROSES', 'Masih Diproses'), ('PERENCANAAN', 'Perencanaan'), ('PEMBANGUNAN', 'Pembangunan')], default='DIAJUKAN', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Perencanaan',
            fields=[
                ('perencanaanid', models.BigAutoField(primary_key=True, serialize=False)),
                ('nama_perencanaan', models.CharField(max_length=200)),
                ('fasilitasid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.fasilitas_perlengkapan')),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
                ('pembangunanid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pembangunan')),
                ('status_pengajuan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.status', to_field='tipestatus')),
            ],
        ),
        migrations.CreateModel(
            name='Penyeleksian',
            fields=[
                ('penyeleksianid', models.BigAutoField(primary_key=True, serialize=False)),
                ('adminid', models.CharField(max_length=200)),
                ('pengajuanid', models.CharField(max_length=200)),
                ('perencanaanid', models.CharField(max_length=200)),
                ('tggl_terima', models.DateTimeField()),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
                ('pembangunanid', models.ManyToManyField(to='core.pembangunan')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.status', to_field='tipestatus')),
            ],
        ),
        migrations.CreateModel(
            name='Pengajuan',
            fields=[
                ('pengajuanid', models.BigAutoField(primary_key=True, serialize=False)),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
                ('masyarakatid', models.ManyToManyField(to='core.masyarakat')),
                ('nama_fasilitas', models.ManyToManyField(to='core.fasilitas_perlengkapan')),
                ('perlengkapanid', models.ManyToManyField(to='core.perlengkapan_jalan')),
                ('statuspengajuan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.status')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='status',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.status'),
        ),
        migrations.AddField(
            model_name='fasilitas_perlengkapan',
            name='jenis_perlengkapan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.perlengkapan_jalan', to_field='jenis_perlengkapan'),
        ),
        migrations.CreateModel(
            name='Beranda',
            fields=[
                ('folioid', models.BigAutoField(primary_key=True, serialize=False)),
                ('deskripsi', models.TextField(blank=True, null=True)),
                ('jenis_perlengkapan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.perlengkapan_jalan', to_field='jenis_perlengkapan')),
                ('konstruksi_selesai', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pembangunan')),
                ('nama_perencanaan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.perencanaan')),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('nama_admin', models.CharField(max_length=200, unique=True)),
                ('divisi', models.CharField(max_length=200)),
                ('kedinasan', models.CharField(max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
